import { UIElement, Size, Vector, Rect, HorizontalAlignment, VerticalAlignment, Thickness } from '.';
import { DependencyObject, DependencyProperty } from '..';
import '../utils/number-extensions';
import '../utils/string-extensions';
import '../utils/array-extensions';
export declare class FrameworkElement extends UIElement {
    private unclippedDesiredSize;
    protected visualOffset: Vector | null;
    protected measureCore(availableSize: Size): Size;
    protected measureOverride(availableSize: Size): Size;
    protected arrangeCore(finalRect: Rect): void;
    private computeAlignmentOffset(clientSize, inkSize);
    protected arrangeOverride(finalSize: Size): Size;
    protected layoutOverride(): void;
    static widthProperty: DependencyProperty;
    width: number;
    static heightProperty: DependencyProperty;
    height: number;
    static actualWidthProperty: DependencyProperty;
    readonly actualWidth: number;
    private setActualWidth(value);
    static actualHeightProperty: DependencyProperty;
    readonly actualHeight: number;
    private setActualHeight(value);
    static minWidthProperty: DependencyProperty;
    minWidth: number;
    static minHeightProperty: DependencyProperty;
    minHeight: number;
    static maxWidthProperty: DependencyProperty;
    maxWidth: number;
    static maxHeightProperty: DependencyProperty;
    maxHeight: number;
    static verticalAlignmentProperty: DependencyProperty;
    verticalAlignment: VerticalAlignment;
    static horizontalAlignmentProperty: DependencyProperty;
    horizontalAlignment: HorizontalAlignment;
    static marginProperty: DependencyProperty;
    margin: Thickness;
    static dataContextProperty: DependencyProperty;
    dataContext: any;
    readonly parentDataContext: any;
    protected onDependencyPropertyChanged(property: DependencyProperty, value: any, oldValue: any): void;
    protected onParentChanged(oldParent: DependencyObject, newParent: DependencyObject): void;
    static tagProperty: DependencyProperty;
    tag: any;
    static overflowXProperty: DependencyProperty;
    overflowX: any;
    static overflowYProperty: DependencyProperty;
    overflowY: any;
}
